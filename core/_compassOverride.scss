/* - @include transition(transition1,[transition2],[transition3],[transition4],[transition5],[transition6],[transition7],[transition8],[transition9],[transition10])
**********************************************************
 creates cross-browser (compass-like) transition
 when easing not defined, it uses $ease-out-quad
**********************************************************
*/

@mixin transition($transition-1: default, $transition-2: false, $transition-3: false, $transition-4: false, $transition-5: false, $transition-6: false, $transition-7: false, $transition-8: false, $transition-9: false, $transition-10: false) {
  @if $transition-1 == default {
    $transition-1: compact($default-transition-property .4s $ease-out-quad $default-transition-delay);
  }
  $transitions: false;
  @if type-of($transition-1) == list and type-of(nth($transition-1, 1)) == list {
    $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);
  }
  @else {
    $transitions: compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);
  }
  $delays: comma-list();
  $has-delays: false;
  $webkit-value: comma-list();
  $moz-value: comma-list();
  $o-value: comma-list();
  $normal-value: comma-list();
  // This block can be made considerably simpler at the point in time that
  // we no longer need to deal with the differences in how delays are treated.
  @each $transition in $transitions {
    // Extract the values from the list
    // (this would be cleaner if nth took a 3rd argument to provide a default value).
    $property: nth($transition, 1);
    $duration: .4s;
    $timing-function: $ease-out-quad;
    $delay: false;
    @if length($transition) > 1 {
      $duration: nth($transition, 2);
    }
    @if length($transition) > 2 {
      $timing-function: nth($transition, 3);
    }
    @if length($transition) > 3 {
      $delay: nth($transition, 4);
      $has-delays: true;
    }
    // If a delay is provided without a timing function
    @if is-time($timing-function) and not $delay {
      $delay: $timing-function;
      $timing-function: false;
      $has-delays: true;
    }
    // Keep a list of delays in case one is specified
    $delays: append($delays, if($delay, $delay, 0s));
    $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));
    $moz-value: append($moz-value, compact(prefixed-for-transition(-moz, $property) $duration $timing-function $delay));
    $o-value: append($o-value, compact(prefixed-for-transition(-o, $property) $duration $timing-function $delay));
    $normal-value: append($normal-value, compact($property $duration $timing-function $delay));
  }
  @if $experimental-support-for-webkit {
    -webkit-transition: $webkit-value;
    // old webkit doesn't support the delay parameter in the shorthand so we progressively enhance it.
    @if $has-delays {
      -webkit-transition-delay: $delays;
    }
  }
  @if $experimental-support-for-mozilla {
    -moz-transition: $moz-value;
  }
  @if $experimental-support-for-opera {
    -o-transition: $o-value;
  }
  transition: $normal-value;
}